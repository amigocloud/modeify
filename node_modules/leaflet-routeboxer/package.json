{
  "name": "leaflet-routeboxer",
  "version": "1.0.0",
  "description": "Google RouteBoxer implementation for Leaflet",
  "main": "./src/leaflet-routeboxer.js",
  "directories": {
    "example": "example"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/StephanGeorg/leaflet-routeboxer.git"
  },
  "keywords": [
    "maps",
    "leaflet",
    "routeboxer"
  ],
  "author": {
    "name": "Stephan Georg"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/StephanGeorg/leaflet-routeboxer/issues"
  },
  "homepage": "https://github.com/StephanGeorg/leaflet-routeboxer#readme",
  "dependencies": {
    "leaflet": "^0.7.7"
  },
  "readme": "# Leaflet RouteBoxer\n\nThis is a Leaflet implementation of the [RouteBoxer](http://google-maps-utility-library-v3.googlecode.com/svn/trunk/routeboxer/docs/examples.html) Class from Google.\n\nThe RouteBoxer class generates a set of L.LatLngBounds objects that are guaranteed\nto cover every point within a specified distance of a path, such as that generated\nfor a route by an OSRM directions service.\n\n## Example\n\nCheck out the example [demo](http://stephangeorg.github.io/leaflet-routeboxer/example/)\n\n## Install\n\n```\nbower install leaflet-routeboxer\n```\n\n## Usage\n\nYou need to pass an array of L.Latlng objects (route) to the L.RouteBoxer.\n\n\n```javascript\n\nvar route = [\n  [50.5, 30.5],\n  [50.4, 30.6],\n  [50.3, 30.7]\n];\nvar boxes = L.RouteBoxer.box(route, distance);\n\n```\n\n### Using OSRM service\n\nOSRM uses polyline encoding to save bandwith. To decode the polyline you can use\n[Leaflet.encoded](https://github.com/jieter/Leaflet.encoded).\n\n```javascript\n\n// data.route_geometry is the result from a OSRM endpoint\nvar route = new L.Polyline(L.PolylineUtil.decode(data.route_geometry, 6));\nvar boxes = L.RouteBoxer.box(route, distance);\n\n```\n\nHere is a complete example\n\n```javascript\n\n/**\n * Callback function to draw polyline and calculate bounds\n *\n */\nfunction drawRoute(data){\n\n  // OSRM polyline decoding w/ https://github.com/jieter/Leaflet.encoded\n  var route = new L.Polyline(L.PolylineUtil.decode(data.route_geometry, 6));\n  var distance = 10 // distance in km from route\n\n  // You need to pass an array of L.LatLng objects to the RouteBoxer\n  var boxes = L.RouteBoxer.box(route, distance);\n  var boxpolys = new Array(boxes.length);\n\n  for (var i = 0; i < boxes.length; i++) {\n\n    // Perform search over this bounds\n    L.rectangle(boxes[i], {color: \"#ff7800\", weight: 1}).addTo(this.map); // draw rectangles based on Bounds\n\n  }\n  route.addTo(this.map); // draw original route\n}\n\n// Waypoints for the route\nvar loc = [\n  '53.553406,9.992196',\n  '48.139126,11.580186'\n];\n\n// Use endpoint only for testing\nvar url = 'http://router.project-osrm.org/viaroute?';\n\n// Add all waypoints\nfor(var i=0; i<loc.length;i++) {\n  url = url + '&loc=' + loc[i];\n}\n\n// Get route from OSRM\nvar jqxhr = $.ajax({\n  url: url,\n  data: {\n    instructions: false,\n    alt: false\n  },\n  dataType: 'json'\n})\n.done(function(data) {\n  drawRoute(data);\n});\n\n```\n",
  "readmeFilename": "README.md",
  "_id": "leaflet-routeboxer@1.0.0",
  "_shasum": "5f02d752acb925b8fab562cdb741b490a0ed32e9",
  "_resolved": "git+https://github.com/StephanGeorg/leaflet-routeboxer.git#e7b1c880dd39f1faec041d36ffbe5627f8c81d95",
  "_from": "git+https://github.com/StephanGeorg/leaflet-routeboxer.git"
}
